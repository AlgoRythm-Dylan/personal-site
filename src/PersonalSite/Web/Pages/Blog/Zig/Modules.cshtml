@page
@model Web.Pages.Blog.Zig.ModulesModel
@{
    ViewData["Title"] = "Idiomatic Zig - Modules";
}
<h1>Idiomatic Zig #1 - Modules</h1>
<p>
    <i>Written for Zig 0.14.0; last updated Feb 19, 2025</i>
</p>
<p>
    I'm a shameless <a href="https://ziglang.org/">Zig</a>
    stan, but often I struggle with doing things "the Zig way",
    or in more technical terms, idiomatically. This has
    bothered me to such a degree that I have taken to reading
    the stdlib in order to get an idea of how Zig is intended
    to be written. This article - the first of it's kind on my
    blog - will cover modules.
</p>
<h2>Definitions</h2>
<p>
    What exactly is a module in Zig? The
    <a href="https://ziglang.org/documentation/master/">documentation</a>
    doesn't actually offer a formal definition at the time of
    this writing, but in pragmatic terms, it's just a Zig file.
    Zig files are imported using the <code>@@import</code>
    builtin, which returns a <code>type</code>. Therefore, any
    code that you import using the standard builtin becomes its
    own type, whether you really intend it or not.
</p>
<p>
    Modules can have any purpose. Some of them have collections
    of useful functions, like a math library. Some of them are
    intended to be "routers" for collections of other libraries,
    like the built-in <code>std</code> module. Some of them
    are intended to be used as structs, like
    <code>std.BitStack</code>. Since the latter is the most
    complicated use-case with a lot of Zig-isms, this is what
    this article focuses on.
</p>
<h2>Modules as Structs</h2>
<p>
    Let's take a look at this (edited) code from the standard
    BitStack module. This module is intended to be imported
    and used directly as a struct - similar to C# or Java class
    files! This small excerpt of code is a perfect example because
    it is jam-packed with Zig-isms, so let's break down all the
    important bits.
</p>
<pre class="code">
//! Effectively a stack of u1 values implemented using ArrayList(u8).

const BitStack = @@This();

bytes: std.ArrayList(u8),
bit_len: usize = 0,

pub fn init(allocator: Allocator) @@This() {
    return .{
        .bytes = std.ArrayList(u8).init(allocator),
    };
}

pub fn deinit(self: *@@This()) void {
    self.bytes.deinit();
    self.* = undefined;
}
</pre>
<h3>Top-Level Doc Comments</h3>
<pre class="code">
//! Effectively a stack of u1 values implemented using ArrayList(u8).
</pre>
<p>
    This is the first line of the code in this file. There's nothing
    missing! No <code>struct</code> or function is supposed to be
    directly underneath it, like with regular doc comments. This is it.
</p>
<p>
    This is sort of an interesting concept. In Zig, doc comments
    come in two flavors - regular, and top-level. The most
    "regular" way to doc comment your code is to just do the
    usual triple-slash comment above the thing you're documenting.
</p>
<pre class="code">
/// A structure for storing a timestamp, with nanosecond precision (this is a
/// multiline doc comment).
const Timestamp = struct {
</pre>
<p>
    Another option is to use a top-level doc comment. The docs
    point out that this system is not currently very useful for
    anything except modules. It's technically <i>allowed</i>
    in structs, but is ignored.
</p>
<pre class="code">
const Timestamp = struct {
    //! Top level comments are allowed inside a container other than a module,
    //! but it is not very useful.  Currently, when producing the package
    //! documentation, these comments are ignored.
};
</pre>
<p>
    <b>Here's the connection</b>: since an imported Zig file turns into a type,
    there needs to be a way to doc comment the module as a whole, if desired.
    So while top-level comments are sort of useless when it comes to within
    explicitly-written structs like above, it's the only option when it comes
    to modules, and that's what the BitStack code is doing. The result?
</p>
<img src="~/image/bitstack-top-level-doc-comment.png" />
<h3>Top-level declarations</h3>
<p>
    Zig allows top-level declarations of values. Interestingly,
    the order of these values does not matter. The following is valid
    Zig code that will run.
</p>
<pre class="code">
const three = one + 2;
const one = 1;
</pre>
<p>
    When a module is used as a struct, these top-level
    declaration simply become properties on the struct.
    That's what we see in the example code.
</p>
<pre class="code">
bytes: std.ArrayList(u8),
bit_len: usize = 0,
</pre>
<p>
    Later on in the code, these properties can be used as
    normal: <code>self.bytes.deinit();</code>
</p>
<h3>pub</h3>
<p>
    Instead of faithfully following any programming paradigm,
    Zig tends to pick and choose what it likes based on what
    makes the most sense. This is what makes the language so
    unique, but this also adds to the learning curve.
</p>
<p>
    Zig is decidedly not an object-oriented programming language.
    For this reason, Zig doesn't implement encapsulation as we
    know it from OOP. Properties of a struct are always public.
    However, Zig does make functions private by default. This is
    why the keyword <code>pub</code> is added to each of the
    functions that the <code>BitStack</code> struct intends to
    expose.
</p>
<h3><code>@@This()</code></h3>
<p>
    I've saved this part for last because it goes beyond basic Zig.
    One thing you should know about Zig before you continue is
    how generics/ macros/ etc. work.
</p>
<p>
    Zig, unlike C, does not have a preprocessor. Instead,
    <a href="https://stackoverflow.com/a/3937852/8062151">metaprogramming</a>
    (and everything in that vein) is done completely within
    the language itself using a system called <code>comptime</code>.
    The elevator-pitch version of this is that you can write Zig
    that gets executed at compile time to produce different outputs.
    This is extremely handy for things like cross-platform code.
    Again, we can turn to the stdlib for a good example here. The
    standard <code>ArrayList</code> implementation is very interesting.
</p>
<pre class="code">
pub fn ArrayListAligned(comptime T: type, comptime alignment: ?u29) type {
    // ... Blog note: skipping a few lines here...
    return struct {
        const Self = @@This();
        items: Slice,
        capacity: usize,
</pre>
<p>
    That's right. <code>std.ArrayList</code> (which under the hood
    turns into an <code>ArrayListAligned</code>) isn't a type at all.
    It's a <i>function that returns a struct</i>!
</p>
<p>
    This is how you'd do something like macros in c or templates in
    virtually every other language. <code>comptime</code> is a
    somewhat confusing system that would make an excellent entry in
    this blog series, but for now, just note how we see our old friend,
    <code>@@This()</code>!
</p>
<p>
    Here's the problem that <code>@@This()</code> really solves:
    sometimes, a type is defined anonymously, such as in the case
    of <code>std.ArrayList</code> or more relevantly, modules!
    So, if the struct has no name, how could we possibly refer to it?
    That's where the <code>@@This()</code> builtin finally comes in.
    It returns a type - the current type of the current scope - so
    you can reference it in your own code. And since types in Zig
    are valid variables like any other data, we can just store a
    <code>const</code> reference to it for future use. This is
    very common in the Zig stdlib, but unfortunately, the stdlib
    uses it inconsistently. You'll remember that <code>BitStack</code>
    does this:
</p>
<pre class="code">
const BitStack = @@This();

pub fn init(allocator: Allocator) @@This() {
    return .{
        .bytes = std.ArrayList(u8).init(allocator),
    };
}
</pre>
<p>
    Whereas <code>ArrayList</code> does this:
</p>
<pre class="code">
const Self = @@This();

pub fn init(allocator: Allocator) Self {
    return Self{
        .items = &[_]T{},
        .capacity = 0,
        .allocator = allocator,
    };
}
</pre>
<p>
    Did you spot it? It's the return type that isn't consistent.
    <code>BitStack</code> uses the builtin directly, but
    <code>ArrayList</code> uses the reference to <code>Self</code>,
    despite the fact that <code>BitStack</code> stores a reference
    to itself anyways! This probably comes down to style. My initial
    thought was to combine these approaches and use a named variable
    like so:
</p>
<pre class="code">
const BitStack = @@This();

pub fn init(allocator: Allocator) BitStack {
    return .{
        .bytes = std.ArrayList(u8).init(allocator),
    };
}
</pre>
<p>
    The problem: now the code becomes super confusing if
    you want to rename BitStack but forget to change the
    named reference to <code>@@This()</code>. So, the
    approach that <code>ArrayList</code> takes where the
    builtin is used just one time and the type is referenced
    as "Self" from that point on seems to be the best option.
</p>